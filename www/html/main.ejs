<%- include("partials/head", locals) %>
<%- include("partials/header", locals) %>

<script>
  var votes = [
    <% for (var vote of votes) { %>
      "<%= vote %>",
    <% } %>
  ];

  function vote(author) {
    if ($(`.votefor${author}`).hasClass("disabledbutton")) return;

    $.ajax({
      url: "/vote?id=" + author,
      statusCode: {
        401: () => {
          console.log("Not logged in!");
          alert("Not logged in!");
        },
        400: () => {
          console.log("Invalid author!");
          alert("Invalid author!");
        },
        410: () => {
          console.log("Voting has ended.");
          alert("Voting has ended.");
        },
        404: () => {
          console.log("Invalid author!");
          alert("Invalid author!");
        },
        409: () => {
          console.log("Author already voted!");
          alert("Author already voted!");
        },
        406: () => {
          console.log("Too many votes!");
          alert("Too many votes!");
        },
        418: () => {
          document.cookie = "rolled=true; expires=Fri, 31 Dec 9999 23:59:59 GMT"
          alert("Bruh, did you really try to vote for yourself?");
          window.location = "https://www.youtube.com/watch?v=dQw4w9WgXcQ";
        },
        200: () => {
          $(".votefor" + author).css("display", "none");
          $(".unvotefor" + author).css("display", "inherit");
          votes.push(author);
        },
        500: () => {
          console.log("Server error");
          alert("Server error");
        }
      },
    });
  }

  function unvote(author) {
    if ($(`.unvotefor${author}`).hasClass("disabledbutton")) return;

    $.ajax({
      url: "/unvote?id=" + author,
      statusCode: {
        401: () => {
          console.log("Not logged in!");
          alert("Not logged in!");
        },
        400: () => {
          console.log("Invalid author!");
          alert("Invalid author!");
        },
        410: () => {
          console.log("Voting has ended");
          alert("Voting has ended");
        },
        404: () => {
          console.log("Invalid author!");
          alert("Invalid author!");
        },
        409: () => {
          console.log("Author not voted!");
          alert("Author not voted!");
        },
        200: () => {
          $(".unvotefor" + author).css("display", "none");
          $(".votefor" + author).css("display", "inherit");
          votes = votes.filter(x => x != author);
        },
        500: () => {
          console.log("Server error");
          alert("Server error");
        }
      },
    });
  }

  function removeAllVotes() {
    $.ajax({
      url: "/removeallvotes",
      statusCode: {
        403: () => {
          console.log("Unauthorized");
          alert("Unauthorized");
        },
        200: () => {
          console.log("Removed all votes");
          $(".unvote").css("display", "none");
          $(".vote").css("display", "inherit");
          votes = [];
        },
        500: () => {
          console.log("Server error");
          alert("Server error");
        }
      },
    });
  }

  function refresh() {
    if (window.innerWidth < 300) {
      $(".wrapper").css("display", "none");
      $(".reswarning").css("display", "block");
      $(".votenotice").css("display", "none");
      $(".search").css("display", "none");
      return;
    } else if (window.innerWidth < 1070) {
      $(".wrapper").css("display", "");
      $(".reswarning").css("display", "none");
    } else {
      $(".wrapper").css("display", "");
      $(".reswarning").css("display", "none");
      $(".votenotice").css("display", "");
      $(".search").css("display", "");
    }

    if (votes.length == <%= maxVoteCount %>) { 
      $(".vote").addClass("disabledbutton");
      $(".vote:not([aria-describedby]), .vote[aria-describedby='']").attr("title", "You may only vote for <%= maxVoteCount %> modders.");
      $(".entry").attr("disabled", true);
      for (var vote of votes) {
        $(".entry" + vote).attr("disabled", false);
        $(".votefor" + vote).attr("title", "");
      }
      $(".votenotice").css("display", "none");
    } else { 
      $(".vote").removeClass("disabledbutton");
      $(".vote").attr("title", "");
      $(".entry").attr("disabled", false);
      $(".votenotice").text(`You may${votes.length == 0 ? " only" : ""} vote for ${<%= maxVoteCount %> - votes.length}${votes.length == 0 ? "" : " more"} modder${<%= maxVoteCount %> - votes.length == 1 ? "" : "s"}.`);
      if (<%= maxVoteCount %> == -1) {
        $(".votenotice").text("You may vote for as many modders as you'd like.");
      }
    }
    $(".voteentry").attr("disabled", false);
    <% if (!locals.user) { %>
      $(".votenotice").text("You need to be logged in to vote.");
      $(".votebutton").addClass("disabledbutton");
    <% } %>

    $(".authorentry:not(.voteentry) .authorname, body.mobile .authorentry .authorname, body.nomods .authorentry .authorname").css("max-width", $(".authorentry").width() - 115);

    <% if (locals.ended) { %>
      if (parseSearchString()[0] != "votes") window.location.hash = "#votes";
    <% } %>

    if (parseSearchString()[0] == "mods" && !$("body").hasClass("mobile") && !$("body").hasClass("nomods")) {
      window.ranAuthorAnim = false;
      if (!window.ranModAnim) {
        window.ranModAnim = true;
        $(".authorwrapper").addClass("hidden");
        $(".modwrapper").removeClass("hidden");
        $(".votewrapper").addClass("hidden");

        $(".header-authors").removeClass("active");
        $(".header-mods").addClass("active");
        $(".header-votes").removeClass("active");

        $(".authorentry").css("background-color", "#252525");
        $(".authorentry").css("filter", "");
        $(".authorentry *").css("filter", "");

        if (window.readyForAnim) scrollAnimation();
      }
    <% if (locals.manager) { %>
      } else if (parseSearchString()[0] == "votes") {
        $(".votenotice").css("display", "none");
        $(".search").css("display", "none");

        window.ranAuthorAnim = false;
        window.ranModAnim = false;

        $(".authorwrapper").addClass("hidden");
        $(".modwrapper").addClass("hidden");
        $(".votewrapper").removeClass("hidden");

        $(".header-authors").removeClass("active");
        $(".header-mods").removeClass("active");
        $(".header-votes").addClass("active");

        $(".authorentry").css("background-color", "#252525");
        $(".authorentry").css("filter", "");
        $(".authorentry *").css("filter", "");

        $(".modentry").css("background-color", "#252525");
        $(".modentry").css("filter", "");
        $(".modentry *").css("filter", "");
        $(`.modentry .modauthors li:nth-child(2) .modvotebutton`).css("top", "");

        if (window.innerWidth > 1070 && !$("body").hasClass("nomods")) {
          window.lastbig = true;
          var entries = $(".voteentry").detach();
          for (var i = 0; i < entries.length; i++) {
            for (var j = i + 1; j < entries.length; j++) {
              if (parseInt($(entries[j]).find(".votenum").text()) > parseInt($(entries[i]).find(".votenum").text()) || (parseInt($(entries[j]).find(".votenum").text()) == parseInt($(entries[i]).find(".votenum").text()) && $(entries[j]).find(".authorname").text().toLowerCase() < $(entries[i]).find(".authorname").text().toLowerCase())) {
                var temp = entries[i];
                entries[i] = entries[j];
                entries[j] = temp;
              }
            }
          }
          $("ul.votewrapper").prepend(entries);
        } else if (window.lastbig) {
          window.lastbig = false;
          var entries = $(".voteentry").detach();
          for (var i = 0; i < entries.length; i++) {
            for (var j = i + 1; j < entries.length; j++) {
              if ($(entries[j]).find(".authorname").text().toLowerCase() < $(entries[i]).find(".authorname").text().toLowerCase()) {
                var temp = entries[i];
                entries[i] = entries[j];
                entries[j] = temp;
              }
            }
          }
          $("ul.votewrapper").prepend(entries);
        }
    <% } %>
    } else {
      if (parseSearchString()[0] != "authors") window.location.hash = "#authors";
      window.ranModAnim = false;
      if (!window.ranAuthorAnim) {
        window.ranAuthorAnim = true;
        $(".authorwrapper").removeClass("hidden");
        $(".modwrapper").addClass("hidden");
        $(".votewrapper").addClass("hidden");

        $(".header-authors").addClass("active");
        $(".header-mods").removeClass("active");
        $(".header-votes").removeClass("active");

        $(".modentry").css("background-color", "#252525");
        $(".modentry").css("filter", "");
        $(".modentry *").css("filter", "");
        $(`.modentry .modauthors li:nth-child(2) .modvotebutton`).css("top", "");

        if (window.readyForAnim) scrollAnimation();
      }
    }

    if ($("body").hasClass("mobile") || $("body").hasClass("nomods")) {
      $(".entry").css("height", 50);
      $(".entry").css("min-height", 50);
      $(".entry").css("max-height", 50);
      $(".entry ul").css("display", "none");
      $(".votenotice").css("display", "none");
      $(".search").css("display", "none");
    } else {
      $(".entry").css("height", "");
      $(".entry").css("min-height", "");
      $(".entry").css("max-height", "");
      $(".entry ul").css("display", "");
    }

    $(".authorentry:not(.showall) ul li:not(:empty):nth-child(6)").each(function() {
      $(this).attr("content", `Show ${$(this).closest("ul").children().length - 6} more`);
    });
    $(".authorentry.showall ul li:nth-last-child(1)").attr("content", "Show less");

    <% if (locals.user) { %>
      <% if (locals.roll) { %>
        document.cookie.match(/^(.*;)?\s*rolled\s*=\s*[^;]+(.*)?$/) ? $(".votefor<%= user.id %>").addClass("disabledbutton") : $(".votefor<%= user.id %>").removeClass("disabledbutton");
        document.cookie.match(/^(.*;)?\s*rolled\s*=\s*[^;]+(.*)?$/) ? $(".votefor<%= user.id %>:not([aria-describedby]), .votefor<%= user.id %>[aria-describedby='']").attr("title", "You can't vote for yourself.") : $(".votefor<%= user.id %>:not([aria-describedby]), .votefor<%= user.id %>[aria-describedby='']").attr("title", "");
      <% } else { %>
        $(".votefor<%= user.id %>").addClass("disabledbutton");
        $(".votefor<%= user.id %>").attr("title", "You can't vote for yourself.");
      <% } %>
    <% } %>
  }

  $.when($.ready).then(() => {
    setInterval(refresh, 100);

    if (window.performance && window.performance.navigation.type == window.performance.navigation.TYPE_BACK_FORWARD) {
      window.location.reload();
    }

    <% if (locals.manager) { %>
      setInterval(() => {
        if (parseSearchString()[0] == "votes") {
          $.ajax({
            url: "/getvotes",
            statusCode: {
              401: () => {
                console.log("Can't show votes, unauthorized.");
              },
              403: () => {
                console.log("Can't show votes, unauthorized.");
              },
              200: (data) => {
                window.totalvotes = data;
              },
              500: () => {
                console.log("Error getting votes!");
              },
            },
          });
        }
      }, 1000);
    <% } %>

    <% if (!locals.user) { %>
      $(".votebutton").attr("title", "You need to be logged in to vote.");
    <% } %>

    <% if (!locals.mods) { %>
      $("body").addClass("nomods");
    <% } %>
  });

  $(window).on("load", () => {
    window.readyForAnim = true;
    if (parseSearchString()[0] == "mods") {
      if ($(".header-mods").hasClass("active")) {
        setTimeout(() => scrollAnimation(), 1000);
      }
    } else if (parseSearchString()[0] != "votes") {
      if ($(".header-authors").hasClass("active")) {
        setTimeout(() => scrollAnimation(), 1000);
      }
    }

    $(".authorentry ul li:nth-child(6)").after().on("click", function () {
      $(this).closest(".authorentry").addClass("showall");
    });
    $(".authorentry ul li:nth-last-child(1)").after().on("click", function () {
      $(this).closest(".authorentry").removeClass("showall");
    });

    $(".search").on("change paste keyup", function () {
      if (!$(this).val()) return $(".entry").css("display", "");
      var values = $(this).val().split(" ").filter(e => !!e);

      $(".entry:not(.voteentry)").css("display", "none");

      var achildren = [".authorname", "ul li a"];
      $(".authorentry").each(function () {
        for (var child of achildren) {
          var ok = true;
          for (var value of values) {
            if (!$(this).find(child).text().toLowerCase().includes(value.toLowerCase())) {
              ok = false;
              break;
            }
          }
          if (ok) {
            $(this).closest(".entry").css("display", "");
            break;
          }
        }
      });

      var bchildren = [".modname", "div.moddescription", "ul li a"];
      $(".modentry").each(function () {
        for (var child of bchildren) {
          var ok = true;
          for (var value of values) {
            if (!$(this).find(child).text().toLowerCase().includes(value.toLowerCase())) {
              ok = false;
              break;
            }
          }
          if (ok) {
            $(this).closest(".entry").css("display", "");
            break;
          }
        }
      });
    });

    var entries = $(".authorentry:not(.voteentry)").detach();
    for (var i = 0; i < entries.length; i++) {
      for (var j = i + 1; j < entries.length; j++) {
        if ($(entries[j]).find(".authorname").text().toLowerCase() < $(entries[i]).find(".authorname").text().toLowerCase()) {
          var temp = entries[i];
          entries[i] = entries[j];
          entries[j] = temp;
        }
      }
    }
    $("ul.authorwrapper").prepend(entries);

    var modentries = $(".modentry").detach();
    for (var i = 0; i < modentries.length; i++) {
      for (var j = i + 1; j < modentries.length; j++) {
        if ($(modentries[j]).find(".modname").text().toLowerCase() < $(modentries[i]).find(".modname").text().toLowerCase()) {
          var temp = modentries[i];
          modentries[i] = modentries[j];
          modentries[j] = temp;
        }
      }
    }
    $("ul.modwrapper").prepend(modentries);

    var entries = $(".voteentry").detach();
    for (var i = 0; i < entries.length; i++) {
      for (var j = i + 1; j < entries.length; j++) {
        if ($(entries[j]).find(".authorname").text().toLowerCase() < $(entries[i]).find(".authorname").text().toLowerCase()) {
          var temp = entries[i];
          entries[i] = entries[j];
          entries[j] = temp;
        }
      }
    }
    $("ul.votewrapper").prepend(entries);
  });

  function scrollAnimation() {
    if (parseSearchString()[1]) {
      $([document.documentElement, document.body]).animate({
        scrollTop: $(`#${parseSearchString()[1]}`).offset().top - $(`#${parseSearchString()[1]}`).height() + window.innerHeight / 4,
      }, 500);
      setTimeout(() => {
        $(`#${parseSearchString()[1]}`).animate({
          backgroundColor: "#00496c",
        }, 500);
        $({_:0}).animate({_:1}, {
          step: function () {
            $(`#${parseSearchString()[1]}`).css("filter", `contrast(1)`);
            $(`#${parseSearchString()[1]} *`).css("filter", "contrast(1)");
            $(`#${parseSearchString()[1]} .modauthors li:nth-child(2) .modvotebutton`).css("top", "5px");
          },
        })
      }, 600);
    }
  }
</script>

<input class="search" placeholder="Search...">

<div class="votenotice"></div>

<div class="reswarning">Your resolution is too low to view this website.</div>

<ul class="authorwrapper wrapper hidden">
  <% for (var author of authors) { %>
    <div id="<%= author.id %>" class="entry authorentry authorentry<%= author.id %> entry<%= author.id %> authorentry<%= author.discordids.split(',').join(' authorentry') %> entry<%= author.discordids.split(',').join(' entry') %>">
      <div class="authorheader">
        <img class="authoricon" src="<%= author.icon.replace('?size=2048', '?size=128') %>">
        <a class="authorname notalink"><%= author.name %></a>
      </div>
      <button class="votebutton vote votefor<%= author.id %> votefor<%= author.discordids.split(',').join(' votefor') %>" onclick="vote('<%= author.id %>')" <% if (votes.includes(author.id)) { %> style="display:none;"<% } %>>VOTE</button>
      <button class="votebutton unvote unvotefor<%= author.id %> unvotefor<%= author.discordids.split(',').join(' unvotefor') %>" onclick="unvote('<%= author.id %>')" <% if (!votes.includes(author.id)) { %> style="display:none;"<% } %>>VOTED</button>
      <% if (locals.mods) { %>
        <br><br>
        <ul>
          <% for (var mod of mods) { %>
            <% if (mod.authors.includes(author.id)) { %>
              <li><a href="#mods#<%= mod.id %>"><%= mod.name %></a></li>
            <% } %>
          <% } %>
          <li></li>
        </ul>
        <br>
      <% } %>
    </div>
  <% } %>
  <% for (var author of authors) { %>
    <div class="entry dummy"></div>
  <% } %>
</ul>

<% if (locals.mods) { %>
  <ul class="modwrapper wrapper hidden">
    <% for (var mod of mods) { %>
      <div id="<%= mod.id %>" class="entry modentry <% for (var author of mod.authors) { for (var author2 of authors) { if (author == author2.id) { %> modentry<%= author2.id %> entry<%= author2.id %> <% }}} %>">
        <img src="<%= mod.image %>"><br><br class="shrink">
        <a class="modname notalink"><%= mod.name %></a><br><br>
        <div class="moddescription"><%= mod.description.replace(/<\s*br[\s\\\/]*>/gi, "\n").replace(/ +/g, " ") %></div><br><br class="shrink">
        <a class="moddescription" href="https://nexusmods.com/<%= mod.domain %>/mods/<%= mod.nexusid %>">View on NexusMods</a>
        <ul class="modauthors">
          <% var lines = 0; %>
          <% for (var author of mod.authors) { %>
            <% for (var author2 of authors) { %>
              <% if (author == author2.id) { %>
                <li>
                  <img class="authoricon" src="<%= author2.icon %>">
                  <a href="#authors#<%= author2.id %>"><%= author2.name %></a>
                  <button class="votebutton modvotebutton vote votefor<%= author2.id %> votefor<%= author2.discordids.split(',').join(' votefor') %>" onclick="vote('<%= author2.id %>')" <% if (votes.includes(author2.id)) { %> style="display:none;"<% } %>>VOTE</button>
                  <button class="votebutton modvotebutton unvote unvotefor<%= author2.id %> unvotefor<%= author2.discordids.split(',').join(' unvotefor') %>" onclick="unvote('<%= author2.id %>')" <% if (!votes.includes(author2.id)) { %> style="display:none;"<% } %>>VOTED</button>
                  <br>
                </li>
                <% lines++; %>
                <% continue; %>
              <% } %>
            <% } %>
          <% } %>
        </ul>
        <br><br>
        <% for (var i = 0; i < lines; i++) { %>
          <br><br>
        <% } %>
      </div>
    <% } %>
    <% for (var mod of mods) { %>
      <div class="entry dummy"></div>
    <% } %>
  </ul>
<% } %>

<% if (locals.manager) { %>
  <div class="votewrapper wrapper hidden">
    <ul class="votewrapper wrapper hidden">
      <% for (var author of authors) { %>
        <div id="<%= author.id %>" class="entry authorentry authorentry<%= author.id %> entry<%= author.id %> authorentry<%= author.discordids.split(',').join(' authorentry') %> entry<%= author.discordids.split(',').join(' entry') %> voteentry">
          <div class="authorheader">
            <img class="authoricon" src="<%= author.icon.replace('?size=2048', '?size=128') %>">
            <a class="authorname notalink"><%= author.name %></a>
          </div>
          <div class="votenum votes<%= author.id %> votebutton mobilevotenum">...</div>
          <br><br>
          <div class="votenum votes<%= author.id %>">...</div>
          <script>
            $(window).on("load", () => { 
              setInterval(() => {
                var scroll = window.pageYOffset || document.documentElement.scrollTop;
                try {
                  $(".votes<%= author.id %>").text(window.totalvotes["<%= author.id %>"].length);
                  <% if (locals.mods) { %>
                    if (window.innerWidth >= 1070) { 
                      $(".votes<%= author.id %>:not(.mobilevotenum)").fitText(0.2);
                      $(".votes<%= author.id %>:not(.mobilevotenum)").css("display", "block");
                      $(".votes<%= author.id %>.mobilevotenum").css("display", "none");
                    } else {
                  <% } %>
                    $(".votes<%= author.id %>.mobilevotenum").css("display", "block");
                    $(".votes<%= author.id %>:not(.mobilevotenum)").css("display", "none");
                  <% if (locals.mods) { %>
                    }
                  <% } %>
                } catch (e) {
                  $(".votes<%= author.id %>").text("...");
                  <% if (locals.mods) { %>
                    if (window.innerWidth >= 1070) { 
                      $(".votes<%= author.id %>").fitText(0.2);
                    }
                  <% } %>
                }
                document.documentElement.scrollTop = document.body.scrollTop = scroll;
              }, 100)
            });
          </script>
          <br>
        </div>
      <% } %>
      <% for (var author of authors) { %>
        <div class="entry dummy"></div>
      <% } %>
    </ul>
    <button class="removevotes" onclick="if (window.confirm('Are you sure you want to remove all votes?')) removeAllVotes()">Remove all votes</button>
  </div>
<% } %>

<form style="height:0px;width:0px;" name="dirty_check"><input type="hidden" id="page_is_dirty" name="page_is_dirty" value="0"/></form>