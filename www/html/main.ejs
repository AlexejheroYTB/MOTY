<%- include("partials/head", { metaGameName, metaImage }) %>
<%- include("partials/header", { user: !!locals.user ? user : undefined, manager, staff, headerImage }) %>

<style>
  body:not(.mobile) {
    overflow-y: scroll;
  }

  .entry {
    background-color: #252525;
    font-size: 20px;
    color: white;
    width: 310px;
    height: auto;
    margin: 6.9px;
    bottom: 0px;
    box-sizing: border-box;
    left: 0px;
    letter-spacing: 0.3px;
    overflow-wrap: break-word;
    position: relative;
    right: 0px;
    text-align: left;
    text-decoration: none solid rgb(0, 0, 0);
    text-rendering: optimizelegibility;
    text-size-adjust: 100%;
    top: 0px;
    width: 224px;
    column-rule-color: rgb(0, 0, 0);
    perspective-origin: 112px 200.188px;
    transform-origin: 112px 200.188px;
    caret-color: rgb(0, 0, 0);
    border: 0px none rgb(0, 0, 0);
    font-size: 15px;
    list-style: none outside none;
    outline: rgb(255, 255, 255) none 0px;
    min-height: 220px;
  }

  .authorheader {
    display: flex;
    align-items: center;
  }

  .authoricon {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    vertical-align: middle;
  }

  .modentry > img:first-child {
    width: 100%;
    min-height: 126px;
    max-height: 126px;
    vertical-align: middle;
    object-fit: cover;
  }

  .votebutton {
    border-radius: 20%;
    border: none;
    background-color: rgb(60, 64, 67);
    cursor: pointer;
    float: right;
    right: 5px;
    top: 17px;
    position: absolute;
    color: white;
    width: 58px;
  }
  
  .votebutton:focus, .votebutton:active {
    outline: none;
  }

  .votebutton[disabled] {
    background-color: rgb(30, 32, 34);
    color: darkgray;
    cursor: no-drop;
  }

  .modvotebutton {
    left: 156px;
    top: 5px;
  }

  .modauthors li:nth-child(2) .modvotebutton {
    top: 40px;
  }

  .entry[disabled] {
    filter: opacity(50%);
  }
  
  .entry[disabled] > * {
    filter: blur(1px);
  }

  .unvote {
    background: green;
  }

  .authorname {
    vertical-align: middle;
    padding-left: 5px;
  }

  .modname, .moddescription {
    display: block;
    padding-left: 5px;
    padding-right: 5px;
  }

  .modname {
    font-size: 16px;
  }

  br.shrink {
    line-height: 13px;
  }

  .wrapper {
    display: flex;
    flex-wrap: wrap;
    list-style: none;
    padding: 0;
  }

  .modauthors {
    list-style: none;
    padding: 0;
    position: absolute;
    bottom: 0px;
  }

  .modauthors li {
    padding-left: 5px;
    padding-bottom: 5px;
  }

  .modauthors img {
    width: 30px;
    height: 30px;
  }

  .hidden {
    display: none !important;
  }

  .votenum {
    text-align: center;
    font-size: 112px;
    margin-top: -13px;
  }

  .votenotice {
    all: unset;
    font-size: 30px;
    padding-top: 5px;
    margin-bottom: -10px;
    float: right;
    margin-right: 10px;
  }

  .search {
    margin-top: 10px;
    margin-bottom: -10px;
    color: white;
    background-color: #252525;
    border: none;
    border-radius: 25px;
    width: 350px;
    height: 50px;
    margin-left: 10px;
    font-size: 30px;
    padding-left: 10px;
    position: sticky;
    top: 20;
    z-index: 10000;
    background-color: dodgerblue;
    outline: none;
  }

  ::placeholder {
    color: #555;
  }

  .reswarning {
    font-size: 40px;
    display: none;
    color: red;
  }

  body.mobile .entry {
    width: 100% !important;
  }

  body.mobile .search {
    position: unset !important;
  }

  @media screen and (min-width: 400px) {
    body.mobile .entry {
      width: 45% !important;
    }
  }
</style>

<script>
  var votes = [
    <% for (var vote of votes) { %>
      "<%= vote %>",
    <% } %>
  ];

  function vote(author) {
    $.ajax({
      url: "/vote?id=" + author,
      statusCode: {
        401: () => {
          console.log("Not logged in!");
          alert("Not logged in!");
        },
        400: () => {
          console.log("Invalid author!");
          alert("Invalid author!");
        },
        410: () => {
          console.log("Voting has ended.");
          alert("Voting has ended.");
        },
        404: () => {
          console.log("Invalid author!");
          alert("Invalid author!");
        },
        409: () => {
          console.log("Author already voted!");
          alert("Author already voted!");
        },
        406: () => {
          console.log("Too many votes!");
          alert("Too many votes!");
        },
        418: () => {
          document.cookie = "rolled=true; expires=Fri, 31 Dec 9999 23:59:59 GMT"
          alert("Bruh, did you really try to vote for yourself?");
          window.location = "https://www.youtube.com/watch?v=dQw4w9WgXcQ";
        },
        200: () => {
          $(".votefor" + author).css("display", "none");
          $(".unvotefor" + author).css("display", "inherit");
          votes.push(author);
        },
        500: () => {
          console.log("Server error");
          alert("Server error");
        }
      },
    });
  }

  function unvote(author) {
    $.ajax({
      url: "/unvote?id=" + author,
      statusCode: {
        401: () => {
          console.log("Not logged in!");
          alert("Not logged in!");
        },
        400: () => {
          console.log("Invalid author!");
          alert("Invalid author!");
        },
        410: () => {
          console.log("Voting has ended");
          alert("Voting has ended");
        },
        404: () => {
          console.log("Invalid author!");
          alert("Invalid author!");
        },
        409: () => {
          console.log("Author not voted!");
          alert("Author not voted!");
        },
        200: () => {
          $(".unvotefor" + author).css("display", "none");
          $(".votefor" + author).css("display", "inherit");
          votes = votes.filter(x => x != author);
        },
        500: () => {
          console.log("Server error");
          alert("Server error");
        }
      },
    });
  }

  function removeAllVotes() {
    $.ajax({
      url: "/removeallvotes",
      statusCode: {
        403: () => {
          console.log("Unauthorized");
          alert("Unauthorized");
        },
        200: () => {
          console.log("Removed all votes");
          $(".unvote").css("display", "none");
          $(".vote").css("display", "inherit");
          votes = [];
        },
        500: () => {
          console.log("Server error");
          alert("Server error");
        }
      },
    });
  }

  function refresh() {
    $(".votenotice").css("display", "none");
    $(".search").css("display", "");

    if ($(window).width() < 200) {
      $(".wrapper").css("display", "none");
      $(".reswarning").css("display", "block");
    } else if ($(window).width() < 400) {
      $(".wrapper").css("display", "");
      $(".reswarning").css("display", "none");
      $(".modvotebutton").css("left", `${120 + 0.954773869 * ($(window).width() - 200)}px`);
    } else if ($(window).width() < 1040) {
      $(".wrapper").css("display", "");
      $(".reswarning").css("display", "none");
      $(".modvotebutton").css("left", `${110 + 0.45 * ($(window).width() - 400)}px`);
    } else {
      $(".wrapper").css("display", "");
      $(".reswarning").css("display", "none");
      $(".modvotebutton").css("left", "");
      $(".votenotice").css("display", "");
    }

    if (votes.length == 3) { 
      $(".vote").attr("disabled", true);
      $(".entry").attr("disabled", true);
      for (var vote of votes) {
        $(".entry" + vote).attr("disabled", false);
      }
      $(".votenotice").css("display", "none");
    } else { 
      $(".vote").attr("disabled", false);
      $(".entry").attr("disabled", false);
      $(".votenotice").text(`You can vote for ${3 - votes.length} more modder${3 - votes.length == 1 ? "" : "s"}.`);
    }
    $(".voteentry").attr("disabled", false);

    $(".authorentry:not(.voteentry) .authorname").css("max-width", parseInt($(".authorentry").css("width").substring(0, $(".authorentry").css("width").length - 2)) - 115);

    if (parseSearchString()[0] == "mods") {
      window.ranAuthorAnim = false;
      if (!window.ranModAnim) {
        window.ranModAnim = true;
        $(".authorwrapper").addClass("hidden");
        $(".modwrapper").removeClass("hidden");
        $(".votewrapper").addClass("hidden");

        $(".header-authors").removeClass("active");
        $(".header-mods").addClass("active");
        $(".header-votes").removeClass("active");

        $(".authorentry").css("background-color", "#252525");
        $(".authorentry").css("filter", "");
        $(".authorentry *").css("filter", "");

        if (window.readyForAnim) scrollAnimation();
      }
    <% if (locals.manager) { %>
      } else if (parseSearchString()[0] == "votes") {
        $(".votenotice").css("display", "none");
        $(".search").css("display", "none");

        window.ranAuthorAnim = false;
        window.ranModAnim = false;

        $(".authorwrapper").addClass("hidden");
        $(".modwrapper").addClass("hidden");
        $(".votewrapper").removeClass("hidden");

        $(".header-authors").removeClass("active");
        $(".header-mods").removeClass("active");
        $(".header-votes").addClass("active");

        $(".authorentry").css("background-color", "#252525");
        $(".authorentry").css("filter", "");
        $(".authorentry *").css("filter", "");

        $(".modentry").css("background-color", "#252525");
        $(".modentry").css("filter", "");
        $(".modentry *").css("filter", "");
        $(`.modentry .modauthors li:nth-child(2) .modvotebutton`).css("top", "");
    <% } %>
    } else {
      window.ranModAnim = false;
      if (!window.ranAuthorAnim) {
        window.ranAuthorAnim = true;
        $(".authorwrapper").removeClass("hidden");
        $(".modwrapper").addClass("hidden");
        $(".votewrapper").addClass("hidden");

        $(".header-authors").addClass("active");
        $(".header-mods").removeClass("active");
        $(".header-votes").removeClass("active");

        $(".modentry").css("background-color", "#252525");
        $(".modentry").css("filter", "");
        $(".modentry *").css("filter", "");
        $(`.modentry .modauthors li:nth-child(2) .modvotebutton`).css("top", "");

        if (window.readyForAnim) scrollAnimation();
      }
    }

    <% if (locals.roll) { %>
      $(".votefor<%= user.id %>").attr("disabled", document.cookie.match(/^(.*;)?\s*rolled\s*=\s*[^;]+(.*)?$/));
    <% } else { %>
      $(".votefor<%= user.id %>").attr("disabled", "true");
    <% } %>
  }

  $.when($.ready).then(() => {
    setInterval(refresh, 100);

    if (window.performance && window.performance.navigation.type == window.performance.navigation.TYPE_BACK_FORWARD) {
      window.location.reload();
    }

    <% if (locals.manager) { %>
      setInterval(() => {
        if (parseSearchString()[0] == "votes") {
          $.ajax({
            url: "/getvotes",
            statusCode: {
              403: () => {
                console.log("Can't show votes, unauthorized.");
              },
              200: (data) => {
                window.totalvotes = data;
              },
              500: () => {
                console.log("Error getting votes!");
              },
            },
          });
        }
      }, 1000);
    <% } %>
  });

  $(window).on("load", () => {
    window.readyForAnim = true;
    if (parseSearchString()[0] == "mods") {
      if ($(".header-mods").hasClass("active")) {
        setTimeout(() => scrollAnimation(), 1000);
      }
    } else if (parseSearchString()[0] != "votes") {
      if ($(".header-authors").hasClass("active")) {
        setTimeout(() => scrollAnimation(), 1000);
      }
    }

    $(".search").on("change paste keyup", function () {
      if (!$(this).val()) return $(".entry").css("display", "");
      var values = $(this).val().split(" ");

      $(".entry:not(.voteentry)").css("display", "none");

      $(".authorname, .modname").each(function () {
        for (var value of values) {
          if ($(this).text().toLowerCase().includes(value.toLowerCase())) {
            $(this).closest(".entry").css("display", "");
            break;
          }
        }
      });
    });
  });

  function scrollAnimation() {
    if (parseSearchString()[1]) {
      $([document.documentElement, document.body]).animate({
        scrollTop: $(`#${parseSearchString()[1]}`).offset().top - $(`#${parseSearchString()[1]}`).height() + window.innerHeight / 4,
      }, 500);
      setTimeout(() => {
        $(`#${parseSearchString()[1]}`).animate({
          backgroundColor: "#00496c",
        }, 500);
        $({_:0}).animate({_:1}, {
          step: function () {
            $(`#${parseSearchString()[1]}`).css("filter", `contrast(1)`);
            $(`#${parseSearchString()[1]} *`).css("filter", "contrast(1)");
            $(`#${parseSearchString()[1]} .modauthors li:nth-child(2) .modvotebutton`).css("top", "5px");
          },
        })
      }, 600);
    }
  }
</script>

<input class="search" placeholder="Search...">

<div class="votenotice">You can vote for ... more modders.</div>

<div class="reswarning">Your resolution is too low to view this website.</div>

<ul class="authorwrapper wrapper hidden">
  <% for (var author of authors) { %>
    <div id="<%= author.id %>" class="entry authorentry authorentry<%= author.id %> entry<%= author.id %> authorentry<%= author.discordids.split(',').join(' authorentry') %> entry<%= author.discordids.split(',').join(' entry') %>">
      <div class="authorheader">
        <img class="authoricon" src="<%= author.icon %>">
        <a class="authorname notalink"><%= author.name %></a>
      </div>
      <button class="votebutton vote votefor<%= author.id %> votefor<%= author.discordids.split(',').join(' votefor') %>" onclick="vote('<%= author.id %>')" <% if (votes.includes(author.id)) { %> style="display:none;"<% } %>>VOTE</button>
      <button class="votebutton unvote unvotefor<%= author.id %> unvotefor<%= author.discordids.split(',').join(' unvotefor') %>" onclick="unvote('<%= author.id %>')" <% if (!votes.includes(author.id)) { %> style="display:none;"<% } %>>VOTED</button>
      <br><br>
      <ul>
        <% for (var mod of mods) { %>
          <% if (mod.authors.includes(author.id)) { %>
            <li><a href="#mods#<%= mod.id %>"><%= mod.name %></a></li>
          <% } %>
        <% } %>
      </ul>
      <br>
    </div>
  <% } %>
</ul>

<ul class="modwrapper wrapper hidden">
  <% for (var mod of mods) { %>
    <div id="<%= mod.id %>" class="entry modentry <% for (var author of mod.authors) { for (var author2 of authors) { if (author == author2.id) { %> modentry<%= author2.id %> entry<%= author2.id %> <% }}} %>">
      <img src="<%= mod.image %>"><br><br class="shrink">
      <a class="modname notalink"><%= mod.name %></a><br><br>
      <div class="moddescription"><%= mod.description.replace(/<\s*br[\s\\\/]*>/gi, "\n").replace(/ +/g, " ") %></div><br><br class="shrink">
      <a class="moddescription" href="https://nexusmods.com/<%= mod.domain %>/mods/<%= mod.nexusid %>">View on NexusMods</a>
      <ul class="modauthors">
        <% var lines = 0; %>
        <% for (var author of mod.authors) { %>
          <% for (var author2 of authors) { %>
            <% if (author == author2.id) { %>
              <li>
                <img class="authoricon" src="<%= author2.icon %>">
                <a href="#authors#<%= author2.id %>"><%= author2.name %></a>
                <button class="votebutton modvotebutton vote votefor<%= author2.id %> votefor<%= author2.discordids.split(',').join(' votefor') %>" onclick="vote('<%= author2.id %>')" <% if (votes.includes(author2.id)) { %> style="display:none;"<% } %>>VOTE</button>
                <button class="votebutton modvotebutton unvote unvotefor<%= author2.id %> unvotefor<%= author2.discordids.split(',').join(' unvotefor') %>" onclick="unvote('<%= author2.id %>')" <% if (!votes.includes(author2.id)) { %> style="display:none;"<% } %>>VOTED</button>
                <br>
              </li>
              <% lines++; %>
              <% continue; %>
            <% } %>
          <% } %>
        <% } %>
      </ul>
      <br><br>
      <% for (var i = 0; i < lines; i++) { %>
        <br><br>
      <% } %>
    </div>
  <% } %>
</ul>

<% if (locals.manager) { %>
  <div class="votewrapper wrapper hidden">
    <ul class="votewrapper wrapper hidden">
      <% for (var author of authors) { %>
        <div id="<%= author.id %>" class="entry authorentry authorentry<%= author.id %> entry<%= author.id %> authorentry<%= author.discordids.split(',').join(' authorentry') %> entry<%= author.discordids.split(',').join(' entry') %> voteentry">
          <div class="authorheader">
            <img class="authoricon" src="<%= author.icon %>">
            <a class="authorname notalink"><%= author.name %></a>
          </div>
          <br><br>
          <div class="votenum votes<%= author.id %>">...</div>
          <script>
            $(window).on("load", () => { 
              setInterval(() => {
                try {
                  $(".votes<%= author.id %>").text(window.totalvotes.<%= author.id %>.length);
                  $(".votes<%= author.id %>").fitText(0.2);
                } catch (e) {
                  $(".votes<%= author.id %>").text("...");
                  $(".votes<%= author.id %>").fitText(0.2);
                }
              }, 100)
            });
          </script>
          <br>
        </div>
      <% } %>
    </ul>
    <button onclick="if (window.confirm('Are you sure you want to remove all votes?')) removeAllVotes()">Remove all votes</button>
  </div>
<% } %>

<form name="dirty_check"><input type="hidden" id="page_is_dirty" name="page_is_dirty" value="0"/></form>